// Copyright 2021-2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file eliza.proto (package connectrpc.eliza.v1, syntax proto3)
/* eslint-disable */

import type {
  GenFile,
  GenMessage,
  GenService,
} from "@bufbuild/protobuf/codegenv1";
import {
  fileDesc,
  messageDesc,
  serviceDesc,
} from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file eliza.proto.
 */
export const file_eliza: GenFile =
  /*@__PURE__*/
  fileDesc(
    "CgtlbGl6YS5wcm90bxITY29ubmVjdHJwYy5lbGl6YS52MSIeCgpTYXlSZXF1ZXN0EhAKCHNlbnRlbmNlGAEgASgJIh8KC1NheVJlc3BvbnNlEhAKCHNlbnRlbmNlGAEgASgJIiMKD0NvbnZlcnNlUmVxdWVzdBIQCghzZW50ZW5jZRgBIAEoCSIkChBDb252ZXJzZVJlc3BvbnNlEhAKCHNlbnRlbmNlGAEgASgJIiAKEEludHJvZHVjZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSIlChFJbnRyb2R1Y2VSZXNwb25zZRIQCghzZW50ZW5jZRgBIAEoCSIJCgdOb3RoaW5nIhsKDENvdW50UmVxdWVzdBILCgNhZGQYASABKAMiHgoNQ291bnRSZXNwb25zZRINCgVjb3VudBgBIAEoAyIbCgtMaXN0UmVxdWVzdBIMCgRwYWdlGAEgASgDIisKDExpc3RSZXNwb25zZRIMCgRwYWdlGAEgASgDEg0KBWl0ZW1zGAIgAygJMuoCCgxFbGl6YVNlcnZpY2USSgoDU2F5Eh8uY29ubmVjdHJwYy5lbGl6YS52MS5TYXlSZXF1ZXN0GiAuY29ubmVjdHJwYy5lbGl6YS52MS5TYXlSZXNwb25zZSIAEk8KCFNheUFnYWluEh8uY29ubmVjdHJwYy5lbGl6YS52MS5TYXlSZXF1ZXN0GiAuY29ubmVjdHJwYy5lbGl6YS52MS5TYXlSZXNwb25zZSIAEl0KCENvbnZlcnNlEiQuY29ubmVjdHJwYy5lbGl6YS52MS5Db252ZXJzZVJlcXVlc3QaJS5jb25uZWN0cnBjLmVsaXphLnYxLkNvbnZlcnNlUmVzcG9uc2UiACgBMAESXgoJSW50cm9kdWNlEiUuY29ubmVjdHJwYy5lbGl6YS52MS5JbnRyb2R1Y2VSZXF1ZXN0GiYuY29ubmVjdHJwYy5lbGl6YS52MS5JbnRyb2R1Y2VSZXNwb25zZSIAMAEymgIKDVNlY29uZFNlcnZpY2USSgoDU2F5Eh8uY29ubmVjdHJwYy5lbGl6YS52MS5TYXlSZXF1ZXN0GiAuY29ubmVjdHJwYy5lbGl6YS52MS5TYXlSZXNwb25zZSIAEl0KCENvbnZlcnNlEiQuY29ubmVjdHJwYy5lbGl6YS52MS5Db252ZXJzZVJlcXVlc3QaJS5jb25uZWN0cnBjLmVsaXphLnYxLkNvbnZlcnNlUmVzcG9uc2UiACgBMAESXgoJSW50cm9kdWNlEiUuY29ubmVjdHJwYy5lbGl6YS52MS5JbnRyb2R1Y2VSZXF1ZXN0GiYuY29ubmVjdHJwYy5lbGl6YS52MS5JbnRyb2R1Y2VSZXNwb25zZSIAMAEyUQoLSGFiZXJkYXNoZXISQgoEV29yaxIcLmNvbm5lY3RycGMuZWxpemEudjEuTm90aGluZxocLmNvbm5lY3RycGMuZWxpemEudjEuTm90aGluZzJMCgZTbG91Y2gSQgoEV29yaxIcLmNvbm5lY3RycGMuZWxpemEudjEuTm90aGluZxocLmNvbm5lY3RycGMuZWxpemEudjEuTm90aGluZzJfCg1CaWdJbnRTZXJ2aWNlEk4KBUNvdW50EiEuY29ubmVjdHJwYy5lbGl6YS52MS5Db3VudFJlcXVlc3QaIi5jb25uZWN0cnBjLmVsaXphLnYxLkNvdW50UmVzcG9uc2UyXwoQUGFnaW5hdGVkU2VydmljZRJLCgRMaXN0EiAuY29ubmVjdHJwYy5lbGl6YS52MS5MaXN0UmVxdWVzdBohLmNvbm5lY3RycGMuZWxpemEudjEuTGlzdFJlc3BvbnNlYgZwcm90bzM",
  );

/**
 * SayRequest is a single-sentence request.
 *
 * @generated from message connectrpc.eliza.v1.SayRequest
 */
export type SayRequest = Message<"connectrpc.eliza.v1.SayRequest"> & {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence: string;
};

/**
 * Describes the message connectrpc.eliza.v1.SayRequest.
 * Use `create(SayRequestSchema)` to create a new message.
 */
export const SayRequestSchema: GenMessage<SayRequest> =
  /*@__PURE__*/
  messageDesc(file_eliza, 0);

/**
 * SayResponse is a single-sentence response.
 *
 * @generated from message connectrpc.eliza.v1.SayResponse
 */
export type SayResponse = Message<"connectrpc.eliza.v1.SayResponse"> & {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence: string;
};

/**
 * Describes the message connectrpc.eliza.v1.SayResponse.
 * Use `create(SayResponseSchema)` to create a new message.
 */
export const SayResponseSchema: GenMessage<SayResponse> =
  /*@__PURE__*/
  messageDesc(file_eliza, 1);

/**
 * ConverseRequest is a single sentence request sent as part of a
 * back-and-forth conversation.
 *
 * @generated from message connectrpc.eliza.v1.ConverseRequest
 */
export type ConverseRequest = Message<"connectrpc.eliza.v1.ConverseRequest"> & {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence: string;
};

/**
 * Describes the message connectrpc.eliza.v1.ConverseRequest.
 * Use `create(ConverseRequestSchema)` to create a new message.
 */
export const ConverseRequestSchema: GenMessage<ConverseRequest> =
  /*@__PURE__*/
  messageDesc(file_eliza, 2);

/**
 * ConverseResponse is a single sentence response sent in answer to a
 * ConverseRequest.
 *
 * @generated from message connectrpc.eliza.v1.ConverseResponse
 */
export type ConverseResponse =
  Message<"connectrpc.eliza.v1.ConverseResponse"> & {
    /**
     * @generated from field: string sentence = 1;
     */
    sentence: string;
  };

/**
 * Describes the message connectrpc.eliza.v1.ConverseResponse.
 * Use `create(ConverseResponseSchema)` to create a new message.
 */
export const ConverseResponseSchema: GenMessage<ConverseResponse> =
  /*@__PURE__*/
  messageDesc(file_eliza, 3);

/**
 * IntroduceRequest asks Eliza to introduce itself to the named user.
 *
 * @generated from message connectrpc.eliza.v1.IntroduceRequest
 */
export type IntroduceRequest =
  Message<"connectrpc.eliza.v1.IntroduceRequest"> & {
    /**
     * @generated from field: string name = 1;
     */
    name: string;
  };

/**
 * Describes the message connectrpc.eliza.v1.IntroduceRequest.
 * Use `create(IntroduceRequestSchema)` to create a new message.
 */
export const IntroduceRequestSchema: GenMessage<IntroduceRequest> =
  /*@__PURE__*/
  messageDesc(file_eliza, 4);

/**
 * IntroduceResponse is one sentence of Eliza's introductory monologue.
 *
 * @generated from message connectrpc.eliza.v1.IntroduceResponse
 */
export type IntroduceResponse =
  Message<"connectrpc.eliza.v1.IntroduceResponse"> & {
    /**
     * @generated from field: string sentence = 1;
     */
    sentence: string;
  };

/**
 * Describes the message connectrpc.eliza.v1.IntroduceResponse.
 * Use `create(IntroduceResponseSchema)` to create a new message.
 */
export const IntroduceResponseSchema: GenMessage<IntroduceResponse> =
  /*@__PURE__*/
  messageDesc(file_eliza, 5);

/**
 * @generated from message connectrpc.eliza.v1.Nothing
 */
export type Nothing = Message<"connectrpc.eliza.v1.Nothing"> & {};

/**
 * Describes the message connectrpc.eliza.v1.Nothing.
 * Use `create(NothingSchema)` to create a new message.
 */
export const NothingSchema: GenMessage<Nothing> =
  /*@__PURE__*/
  messageDesc(file_eliza, 6);

/**
 * @generated from message connectrpc.eliza.v1.CountRequest
 */
export type CountRequest = Message<"connectrpc.eliza.v1.CountRequest"> & {
  /**
   * @generated from field: int64 add = 1;
   */
  add: bigint;
};

/**
 * Describes the message connectrpc.eliza.v1.CountRequest.
 * Use `create(CountRequestSchema)` to create a new message.
 */
export const CountRequestSchema: GenMessage<CountRequest> =
  /*@__PURE__*/
  messageDesc(file_eliza, 7);

/**
 * @generated from message connectrpc.eliza.v1.CountResponse
 */
export type CountResponse = Message<"connectrpc.eliza.v1.CountResponse"> & {
  /**
   * @generated from field: int64 count = 1;
   */
  count: bigint;
};

/**
 * Describes the message connectrpc.eliza.v1.CountResponse.
 * Use `create(CountResponseSchema)` to create a new message.
 */
export const CountResponseSchema: GenMessage<CountResponse> =
  /*@__PURE__*/
  messageDesc(file_eliza, 8);

/**
 * @generated from message connectrpc.eliza.v1.ListRequest
 */
export type ListRequest = Message<"connectrpc.eliza.v1.ListRequest"> & {
  /**
   * @generated from field: int64 page = 1;
   */
  page: bigint;
};

/**
 * Describes the message connectrpc.eliza.v1.ListRequest.
 * Use `create(ListRequestSchema)` to create a new message.
 */
export const ListRequestSchema: GenMessage<ListRequest> =
  /*@__PURE__*/
  messageDesc(file_eliza, 9);

/**
 * @generated from message connectrpc.eliza.v1.ListResponse
 */
export type ListResponse = Message<"connectrpc.eliza.v1.ListResponse"> & {
  /**
   * @generated from field: int64 page = 1;
   */
  page: bigint;

  /**
   * @generated from field: repeated string items = 2;
   */
  items: string[];
};

/**
 * Describes the message connectrpc.eliza.v1.ListResponse.
 * Use `create(ListResponseSchema)` to create a new message.
 */
export const ListResponseSchema: GenMessage<ListResponse> =
  /*@__PURE__*/
  messageDesc(file_eliza, 10);

/**
 * ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
 * for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
 * the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
 * superficiality of human-computer communication. DOCTOR simulates a
 * psychotherapist, and is commonly found as an Easter egg in emacs
 * distributions.
 *
 * @generated from service connectrpc.eliza.v1.ElizaService
 */
export const ElizaService: GenService<{
  /**
   * Say is a unary RPC. Eliza responds to the prompt with a single sentence.
   *
   * @generated from rpc connectrpc.eliza.v1.ElizaService.Say
   */
  say: {
    methodKind: "unary";
    input: typeof SayRequestSchema;
    output: typeof SayResponseSchema;
  };
  /**
   * SayAgain is a unary RPC. Eliza responds to the prompt with a single sentence.
   *
   * @generated from rpc connectrpc.eliza.v1.ElizaService.SayAgain
   */
  sayAgain: {
    methodKind: "unary";
    input: typeof SayRequestSchema;
    output: typeof SayResponseSchema;
  };
  /**
   * Converse is a bidirectional RPC. The caller may exchange multiple
   * back-and-forth messages with Eliza over a long-lived connection. Eliza
   * responds to each ConverseRequest with a ConverseResponse.
   *
   * @generated from rpc connectrpc.eliza.v1.ElizaService.Converse
   */
  converse: {
    methodKind: "bidi_streaming";
    input: typeof ConverseRequestSchema;
    output: typeof ConverseResponseSchema;
  };
  /**
   * Introduce is a server streaming RPC. Given the caller's name, Eliza
   * returns a stream of sentences to introduce itself.
   *
   * @generated from rpc connectrpc.eliza.v1.ElizaService.Introduce
   */
  introduce: {
    methodKind: "server_streaming";
    input: typeof IntroduceRequestSchema;
    output: typeof IntroduceResponseSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_eliza, 0);

/**
 * Second Service just to make sure multiple file generation works
 *
 * @generated from service connectrpc.eliza.v1.SecondService
 */
export const SecondService: GenService<{
  /**
   * Say is a unary RPC. Eliza responds to the prompt with a single sentence.
   *
   * @generated from rpc connectrpc.eliza.v1.SecondService.Say
   */
  say: {
    methodKind: "unary";
    input: typeof SayRequestSchema;
    output: typeof SayResponseSchema;
  };
  /**
   * Converse is a bidirectional RPC. The caller may exchange multiple
   * back-and-forth messages with Eliza over a long-lived connection. Eliza
   * responds to each ConverseRequest with a ConverseResponse.
   *
   * @generated from rpc connectrpc.eliza.v1.SecondService.Converse
   */
  converse: {
    methodKind: "bidi_streaming";
    input: typeof ConverseRequestSchema;
    output: typeof ConverseResponseSchema;
  };
  /**
   * Introduce is a server streaming RPC. Given the caller's name, Eliza
   * returns a stream of sentences to introduce itself.
   *
   * @generated from rpc connectrpc.eliza.v1.SecondService.Introduce
   */
  introduce: {
    methodKind: "server_streaming";
    input: typeof IntroduceRequestSchema;
    output: typeof IntroduceResponseSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_eliza, 1);

/**
 * @generated from service connectrpc.eliza.v1.Haberdasher
 */
export const Haberdasher: GenService<{
  /**
   * @generated from rpc connectrpc.eliza.v1.Haberdasher.Work
   */
  work: {
    methodKind: "unary";
    input: typeof NothingSchema;
    output: typeof NothingSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_eliza, 2);

/**
 * @generated from service connectrpc.eliza.v1.Slouch
 */
export const Slouch: GenService<{
  /**
   * @generated from rpc connectrpc.eliza.v1.Slouch.Work
   */
  work: {
    methodKind: "unary";
    input: typeof NothingSchema;
    output: typeof NothingSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_eliza, 3);

/**
 * @generated from service connectrpc.eliza.v1.BigIntService
 */
export const BigIntService: GenService<{
  /**
   * @generated from rpc connectrpc.eliza.v1.BigIntService.Count
   */
  count: {
    methodKind: "unary";
    input: typeof CountRequestSchema;
    output: typeof CountResponseSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_eliza, 4);

/**
 * @generated from service connectrpc.eliza.v1.PaginatedService
 */
export const PaginatedService: GenService<{
  /**
   * @generated from rpc connectrpc.eliza.v1.PaginatedService.List
   */
  list: {
    methodKind: "unary";
    input: typeof ListRequestSchema;
    output: typeof ListResponseSchema;
  };
}> = /*@__PURE__*/ serviceDesc(file_eliza, 5);

// Copyright 2021-2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query-react v0.5.1 with parameter "target=ts+dts+js,import_extension=none,ts_nocheck=false"
// @generated from file connectrpc/eliza/v1/eliza.proto (package connectrpc.eliza.v1, syntax proto3)
/* eslint-disable */

import {
  ConverseRequest,
  ConverseResponse,
  IntroduceRequest,
  IntroduceResponse,
  SayRequest,
  SayResponse,
} from "./eliza_pb";
import { MethodKind, PartialMessage } from "@bufbuild/protobuf";
import {
  ConnectQueryKey,
  createQueryService,
  useTransport,
} from "@connectrpc/connect-query";
import {
  useInfiniteQuery,
  UseInfiniteQueryOptions,
  useMutation,
  UseMutationOptions,
  useQuery,
  UseQueryOptions,
} from "@tanstack/react-query";
import { ConnectError } from "@connectrpc/connect";

/**
 * ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
 * for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
 * the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
 * superficiality of human-computer communication. DOCTOR simulates a
 * psychotherapist, and is commonly found as an Easter egg in emacs
 * distributions.
 *
 * @generated from service connectrpc.eliza.v1.ElizaService
 */
export const ElizaService = {
  typeName: "connectrpc.eliza.v1.ElizaService",
  methods: {
    /**
     * Say is a unary RPC. Eliza responds to the prompt with a single sentence.
     *
     * @generated from rpc connectrpc.eliza.v1.ElizaService.Say
     */
    say: {
      name: "Say",
      I: SayRequest,
      O: SayResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Converse is a bidirectional RPC. The caller may exchange multiple
     * back-and-forth messages with Eliza over a long-lived connection. Eliza
     * responds to each ConverseRequest with a ConverseResponse.
     *
     * @generated from rpc connectrpc.eliza.v1.ElizaService.Converse
     */
    converse: {
      name: "Converse",
      I: ConverseRequest,
      O: ConverseResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * Introduce is a server streaming RPC. Given the caller's name, Eliza
     * returns a stream of sentences to introduce itself.
     *
     * @generated from rpc connectrpc.eliza.v1.ElizaService.Introduce
     */
    introduce: {
      name: "Introduce",
      I: IntroduceRequest,
      O: IntroduceResponse,
      kind: MethodKind.ServerStreaming,
    },
  },
} as const;

const $queryService = createQueryService({
  service: ElizaService,
});
/**
 * Say is a unary RPC. Eliza responds to the prompt with a single sentence.
 *
 * @generated from rpc connectrpc.eliza.v1.ElizaService.Say
 */
export const say = $queryService.say;

export const useSayQuery = (
  input?: Parameters<typeof say.createUseQueryOptions>[0],
  options?: Parameters<typeof say.createUseQueryOptions>[1],
  queryOptions?: Partial<
    UseQueryOptions<
      SayResponse,
      ConnectError,
      SayResponse,
      ConnectQueryKey<SayRequest>
    >
  >,
) => {
  const transport = useTransport();
  const baseOptions = say.createUseQueryOptions(input, {
    transport,
    ...options,
  });

  return useQuery({
    ...baseOptions,
    ...queryOptions,
  });
};

export const useSayMutation = (
  options?: Parameters<typeof say.createUseMutationOptions>[0],
  queryOptions?: Partial<
    UseMutationOptions<SayResponse, ConnectError, PartialMessage<SayRequest>>
  >,
) => {
  const transport = useTransport();
  const baseOptions = say.createUseMutationOptions({ transport, ...options });

  return useMutation({
    ...baseOptions,
    ...queryOptions,
  });
};

export const useSayInfiniteQuery = (
  input: Parameters<typeof say.createUseInfiniteQueryOptions>[0],
  options: Parameters<typeof say.createUseInfiniteQueryOptions>[1],
  queryOptions?: Partial<
    UseInfiniteQueryOptions<
      SayResponse,
      ConnectError,
      SayResponse,
      SayResponse,
      ConnectQueryKey<SayRequest>
    >
  >,
) => {
  const transport = useTransport();
  const baseOptions = say.createUseInfiniteQueryOptions(input, {
    transport,
    ...options,
  });

  return useInfiniteQuery<
    SayResponse,
    ConnectError,
    SayResponse,
    keyof typeof input extends never ? any : ConnectQueryKey<SayRequest>
  >({
    ...baseOptions,
    ...queryOptions,
  });
};

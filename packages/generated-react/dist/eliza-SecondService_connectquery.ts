// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query v0.4.2 with parameter "target=ts"
// @generated from file eliza.proto (package connectrpc.eliza.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@connectrpc/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { IntroduceRequest, IntroduceResponse, SayRequest, SayResponse } from "./eliza_pb.js";

export const typeName = "connectrpc.eliza.v1.SecondService";

/**
 * Say is a unary RPC. Eliza responds to the prompt with a single sentence.
 *
 * @generated from rpc connectrpc.eliza.v1.SecondService.Say
 */
export const say = createQueryService({
  service: {
    methods: {
      say: {
        name: "Say",
        kind: MethodKind.Unary,
        I: SayRequest,
        O: SayResponse,
      },
    },
    typeName: "connectrpc.eliza.v1.SecondService",
  },
}).say;

/**
 * Introduce is a server streaming RPC. Given the caller's name, Eliza
 * returns a stream of sentences to introduce itself.
 *
 * @generated from rpc connectrpc.eliza.v1.SecondService.Introduce
 */
export const introduce = createQueryService({
  service: {
    methods: {
      introduce: {
        name: "Introduce",
        kind: MethodKind.ServerStreaming,
        I: IntroduceRequest,
        O: IntroduceResponse,
      },
    },
    typeName: "connectrpc.eliza.v1.SecondService",
  },
}).introduce;

// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query-with-hooks v0.0.1 with parameter "target=ts,import-hook-from=@tanstack/react-query"
// @generated from file eliza.proto (package buf.connect.demo.eliza.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { count } from "./eliza-BigIntService_connectquery.ts";
import { UseBaseQueryOptions, useInfiniteQuery, UseInfiniteQueryOptions, useMutation, UseMutationOptions, useQuery } from "@tanstack/react-query";
import { PartialMessage } from "@bufbuild/protobuf";
import { CountRequest, CountResponse } from "./eliza_pb.js";
import { ConnectError } from "@bufbuild/connect";

/**
 * @generated from rpc buf.connect.demo.eliza.v1.BigIntService.Count
 */
export const useCountQuery = 
  ({
    inputs,
    transformParams,
  }: {
    inputs: Parameters<typeof count.useQuery>;
    transformParams?: (
      baseOptions: ReturnType<typeof count.useQuery>
    ) => Partial<UseBaseQueryOptions<PartialMessage<CountRequest>, ConnectError>>;
  }) => {
    const baseOptions = count.useQuery(...inputs);
    let options = baseOptions;
    if (transformParams) {
      options = Object.assign({}, baseOptions, transformParams(baseOptions));
    }

    return useQuery(options);
  };

export const useCountMutation = 
  ({
    inputs,
    transformParams,
  }: {
    inputs: Parameters<typeof count.useMutation>;
    transformParams?: (
      baseOptions: ReturnType<typeof count.useMutation>
    ) => Partial<UseMutationOptions<PartialMessage<CountResponse>, ConnectError, PartialMessage<CountRequest>>>;
  }) => {
    const baseOptions = count.useMutation(...inputs);
    let options = baseOptions;
    if (transformParams) {
      options = Object.assign({}, baseOptions, transformParams(baseOptions));
    }

    return useMutation(options);
  };

export const useCountInfiniteQuery = 
  ({
    inputs,
    transformParams,
  }: {
    inputs: Parameters<typeof count.useInfiniteQuery>;
    transformParams?: (
      baseOptions: ReturnType<typeof count.useInfiniteQuery>
    ) => Partial<UseInfiniteQueryOptions<PartialMessage<CountRequest>, ConnectError>>;
  }) => {
    const baseOptions = count.useInfiniteQuery(...inputs);
    let options = baseOptions;
    if (transformParams) {
      options = Object.assign({}, baseOptions, transformParams(baseOptions));
    }

    return useInfiniteQuery(options);
  };

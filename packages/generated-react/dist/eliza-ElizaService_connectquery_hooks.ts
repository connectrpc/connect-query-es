// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-query-with-hooks v0.0.1 with parameter "target=ts"
// @generated from file eliza.proto (package buf.connect.demo.eliza.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { say, sayAgain } from "./eliza-ElizaService_connectquery.ts";
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";

/**
 * Say is a unary request demo. This method should allow for a one sentence
 * response given a one sentence request.
 *
 * @generated from rpc buf.connect.demo.eliza.v1.ElizaService.Say
 */
export const useSayQuery = 
  (...inputs: Parameters<typeof say.useQuery>) => useQuery(say.useQuery(inputs));

export const useSayMutation = 
  (...inputs: Parameters<typeof say.useMutation>) => useMutation(say.useMutation(inputs));

export const useSayInfiniteQuery = 
  (...inputs: Parameters<typeof say.useInfiniteQuery>) => useInfiniteQuery(say.useInfiniteQuery(inputs));

/**
 * Say is a unary request demo. This method should allow for a one sentence
 * response given a one sentence request.
 *
 * @generated from rpc buf.connect.demo.eliza.v1.ElizaService.SayAgain
 */
export const useSayAgainQuery = 
  (...inputs: Parameters<typeof sayAgain.useQuery>) => useQuery(sayAgain.useQuery(inputs));

export const useSayAgainMutation = 
  (...inputs: Parameters<typeof sayAgain.useMutation>) => useMutation(sayAgain.useMutation(inputs));

export const useSayAgainInfiniteQuery = 
  (...inputs: Parameters<typeof sayAgain.useInfiniteQuery>) => useInfiniteQuery(sayAgain.useInfiniteQuery(inputs));

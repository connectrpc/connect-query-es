// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.connect.demo.eliza.v1;

// ElizaService provides a way to talk to the ELIZA, which is a port of
// the DOCTOR script for Joseph Weizenbaum's original ELIZA program.
// Created in the mid-1960s at the MIT Artificial Intelligence Laboratory,
// ELIZA demonstrates the superficiality of human-computer communication.
// DOCTOR simulates a psychotherapist, and is commonly found as an Easter
// egg in emacs distributions.
service ElizaService {
  // Say is a unary request demo. This method should allow for a one sentence
  // response given a one sentence request.
  rpc Say(SayRequest) returns (SayResponse) {}
  // Say is a unary request demo. This method should allow for a one sentence
  // response given a one sentence request.
  rpc SayAgain(SayRequest) returns (SayResponse) {}
  // Converse is a bi-directional streaming request demo. This method should allow for
  // many requests and many responses.
  rpc Converse(stream ConverseRequest) returns (stream ConverseResponse) {}
  // Introduce is a server-streaming request demo.  This method allows for a single request that will return a series
  // of responses
  rpc Introduce(IntroduceRequest) returns (stream IntroduceResponse) {}
}

// Second Service just to make sure multiple file generation works
service SecondService {
  // Say is a unary request demo. This method should allow for a one sentence
  // response given a one sentence request.
  rpc Say(SayRequest) returns (SayResponse) {}
  // Converse is a bi-directional streaming request demo. This method should allow for
  // many requests and many responses.
  rpc Converse(stream ConverseRequest) returns (stream ConverseResponse) {}
  // Introduce is a server-streaming request demo.  This method allows for a single request that will return a series
  // of responses
  rpc Introduce(IntroduceRequest) returns (stream IntroduceResponse) {}
}

// SayRequest describes the sentence said to the ELIZA program.
message SayRequest {
  string sentence = 1;
}

// SayResponse describes the sentence responded by the ELIZA program.
message SayResponse {
  string sentence = 1;
}

// ConverseRequest describes the sentence said to the ELIZA program.
message ConverseRequest {
  string sentence = 1;
}

// ConverseResponse describes the sentence responded by the ELIZA program.
message ConverseResponse {
  string sentence = 1;
}

// IntroduceRequest describes a request for details from the ELIZA program.
message IntroduceRequest {
  string name = 1;
}

// IntroduceResponse describes the sentence responded by the ELIZA program.
message IntroduceResponse {
  string sentence = 1;
}

service Haberdasher {
  rpc Work(Nothing) returns (Nothing);
}

service Slouch {
  rpc Work(Nothing) returns (Nothing);
}

message Nothing {}

message CountRequest {
  int64 add = 1;
}

message CountResponse {
  int64 count = 1;
}

service BigIntService {
  rpc Count(CountRequest) returns (CountResponse);
}

message ListRequest {
  int64 page = 1;
}

message ListResponse {
  int64 page = 1;
  repeated string items = 2;
}

service PaginatedService {
  rpc List(ListRequest) returns (ListResponse);
}

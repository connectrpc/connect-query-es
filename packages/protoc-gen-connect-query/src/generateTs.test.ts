// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import type { Target } from '@bufbuild/protoplugin/ecmascript';
import { describe, expect, it } from '@jest/globals';

import packageJson from '../package.json';
import { generate } from './jest/helpers';

describe('generateTs', () => {
  describe('eliza.proto', () => {
    const expected = (target: Target) => [
      '// Copyright 2021-2022 Buf Technologies, Inc.',
      '//',
      '// Licensed under the Apache License, Version 2.0 (the "License");',
      '// you may not use this file except in compliance with the License.',
      '// You may obtain a copy of the License at',
      '//',
      '//      http://www.apache.org/licenses/LICENSE-2.0',
      '//',
      '// Unless required by applicable law or agreed to in writing, software',
      '// distributed under the License is distributed on an "AS IS" BASIS,',
      '// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.',
      '// See the License for the specific language governing permissions and',
      '// limitations under the License.',
      '',
      `// @generated by protoc-gen-connect-query v${packageJson.version} with parameter "target=${target}"`,
      '// @generated from file eliza.proto (package connectrpc.eliza.v1, syntax proto3)',
      '/* eslint-disable */',
      '// @ts-nocheck',
      '',
      'import { createQueryService } from "@bufbuild/connect-query";',
      'import { MethodKind } from "@bufbuild/protobuf";',
      'import { SayRequest, SayResponse } from "./eliza_pb.js";',
      '',
      'export const typeName = "connectrpc.eliza.v1.ElizaService";',
      '',
      '/**',
      ' * Say is a unary RPC. Eliza responds to the prompt with a single sentence.',
      ' *',
      ' * @generated from rpc connectrpc.eliza.v1.ElizaService.Say',
      ' */',
      'export const say = createQueryService({',
      '  service: {',
      '    methods: {',
      '      say: {',
      '        name: "Say",',
      '        kind: MethodKind.Unary,',
      '        I: SayRequest,',
      '        O: SayResponse,',
      '      },',
      '    },',
      '    typeName: "connectrpc.eliza.v1.ElizaService",',
      '  },',
      '}).say;',
      '',
      '/**',
      ' * SayAgain is a unary RPC. Eliza responds to the prompt with a single sentence.',
      ' *',
      ' * @generated from rpc connectrpc.eliza.v1.ElizaService.SayAgain',
      ' */',
      'export const sayAgain = createQueryService({',
      '  service: {',
      '    methods: {',
      '      sayAgain: {',
      '        name: "SayAgain",',
      '        kind: MethodKind.Unary,',
      '        I: SayRequest,',
      '        O: SayResponse,',
      '      },',
      '    },',
      '    typeName: "connectrpc.eliza.v1.ElizaService",',
      '  },',
      '}).sayAgain;',
    ];

    it('generates a full ts file', () => {
      const target = 'ts';
      const output = generate(target)(
        `eliza-ElizaService_connectquery.${target}`,
      );
      expect(output).toStrictEqual(expected(target));
    });

    it('generates a full js file', () => {
      const target = 'js';
      const output = generate(target)(
        `eliza-ElizaService_connectquery.${target}`,
      );
      expect(output).toStrictEqual(expected(target));
    });
  });

  describe('example.proto', () => {
    it('generates a full ts file', () => {
      const target = 'ts';
      const output = generate(target)(
        `example-TodoService_connectquery.${target}`,
      );
      expect(output).toContain(
        '        idempotency: MethodIdempotency.NoSideEffects,',
      );
    });
  });
});

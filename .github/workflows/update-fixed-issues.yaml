name: Update Fixed Issues

on:
  release:
    types: [published]

jobs:
  update-fixed-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Extract version from release
        id: extract_version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          VERSION=$(echo "$VERSION" | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release info for issue comments
        id: release_info
        run: |
          # Get last two releases
          RELEASES=$(gh api repos/${{ github.repository }}/releases --jq ".[0:2].[].name")
          LATEST_RELEASE=$(echo "${RELEASES}" | head -1)
          PREV_RELEASE=$(echo "${RELEASES}" | tail -1)

          echo "latest=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          echo "previous=$PREV_RELEASE" >> $GITHUB_OUTPUT

          RELEASE_URL=$(gh release view v${{ steps.extract_version.outputs.version }} --json url | jq -r ".url")
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on fixed issues
        run: |
          # Get PRs included in this release
          START=$(gh release view ${{ steps.release_info.outputs.previous }} --json publishedAt | jq -r ".publishedAt")
          END=$(gh release view ${{ steps.release_info.outputs.latest }} --json publishedAt | jq -r ".publishedAt")
          PRS=$(gh pr list --search="merged:$START..$END" --json="number" | jq -r ".[].number")

          # For each PR, get the issues it fixes and comment on them
          echo "$PRS" | while IFS= read -r pr; do
            if [[ -z "$pr" ]]; then
              continue
            fi
            
            ISSUES=$(gh api graphql -F owner='${{ github.repository_owner }}' -F repo='${{ github.event.repository.name }}' -F pr=$pr -f query='
              query ($owner: String!, $repo: String!, $pr: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $pr) {
                    closingIssuesReferences(first: 100) {
                      nodes {
                        number
                      }
                    }
                  }
                }
              }' | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes[].number')
            
            echo "$ISSUES" | while IFS= read -r issue; do
              issue=$(echo $issue | tr -d '\n')
              if [[ -z "$issue" ]]; then
                continue
              fi
              echo "Adding comment to issue $issue"
              gh issue comment $issue -b "Released in [${{ steps.extract_version.outputs.version }}](${{ steps.release_info.outputs.release_url }}) ðŸš€"
            done
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
